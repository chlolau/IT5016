# This repository stores a collection of code that I have practised over the course of my software development study.
# It begins with key learning activities that formed part of the modules and concludes with the software project 
# that was coded for Assessment 2. 


# Learning activity 22 - Getting string input from the user
# SleepCalculator.py

print("Welcome to this program to determine the number of hours you've slept in total\n")
yob = int(input("Please enter your year of birth: \n"))
 
print("The number of hours you've slept in total is ", (2022 - yob)*7*52)


# Learning activity 32 - Boolean Comparisons
# Challenge 2
# This program is designed to check the guest list for entrants to a bar

yob = int(input("Please enter your year of birth: "))
name = input("Please enter your name: ")

if (2022 - yob) < 21:
  return False
elif name == "Suzanne May":
  return False
elif name == "Wiremu Rangi":
  return False
else:
  return True


# Learning activity 35 - If elif Statements
# Challenge 1
# This program reads an earthquake magnitude from the user and displays the appropriate descriptor

magnitude = int(input("Please enter the earthquake magnitude: "))

if magnitude >= 10:
  print("This is considered to be a meteoric earthquake")
elif magnitude >= 8:
  print("This is considered to be a great earthquake")
elif magnitude >= 7:
  print("This is considered to be a major earthquake")
elif magnitude >= 6:
  print("This is considered to be a strong earthquake")
elif magnitude >= 5:
  print("This is considered to be a moderate earthquake")
elif magnitude >= 4:
  print("This is considered to be a light earthquake")
elif magnitude >= 3:
  print("This is considered to be a minor earthquake")
elif magnitude >= 2:
  print("This is considered to be a very minor earthquake")
else:
  print("This is considered to be a micro earthquake")
  
# Challenge 4
# This program reads a employee rating (0, 0.4 or 0.6 or more) and indicates whether the performance
# was unacceptable, acceptable or meritorious. The amount of the employees' raise is then reported 
# and an error message displayed if an invalid number is entered.

rating = int(input("Please enter rating: "))

if rating == 0:
  print("Performance was unacceptable. Employee's raise is $", 2400*rating)
elif rating == 0.4:
  print("Performance was acceptable. Employee's raise is $", 2400*rating)
elif rating >= 0.6:
  print("Performance was meritorious. Employee's raise is $", 2400*rating)
else:
  print("An invalid number has been entered.") 
  
  
# Learning Activity 38 - More While Loop Practice
# This program gives the user the option to either calculate the area or volume of the given shape or 
# exit the program. It displays the options until the user types exit and repeats a prompt if an 
# invalid integer is entered.

chosen_option = False
x_valid = False
y_valid = False

print("Welcome to this area/volume calculator")

# Use while to get first input
while chosen_option == False:
  choice = input("Would you like to calculate a) surface area or b) volume?")
  
  if choice.lower() == "a":
    chosen_option = "a"
    chosen_option = True
  elif choice.lower() == "b":
    chosen_option = "b"
    chosen_option = True
  else:
    print("Incorrect choice, please try again.")
    
  # Use while to get x value
  while x_valid == False:
    x = int(input("Enter the value of x: ")
    if x >= 10 and x > 0:
      print("Invalid length")
    else:
      x_valid = True
   
   # Use while to get y value
   while y_valid == False:
    y = int(input("Enter the value of y: ")
    if y >= 8 and y > 0:
      print("Invalid length")
    else:
      y_valid = True
    
    # Do area calculation
    if chosen_option == "a":
      area = (10*8 - x*y) * 2 + 3*10*2 + 3*8*2 + y*3*2
      print("The surface area of the shape is ", area)
      
     # Do volume calculation
     if chosen_option == "b":
      volume = 10*3*(8 - y) + y*3*(10 - x)
      print("The volume of the shape is ", volume)
      
     # Testing
     print("My assertions are:\nsurface, x = 5, y = 4, output = 252\nvolume, x = 7, y = 3, output = 177")


# Learning Activity 49 - More Function Practice
# Challenge 4
# This program defines a function histogram() that takes a list of integers and prints a histogram to the
# screen

list_1 = [4,9,7]

def histogram(list_1):
  for count in range(0, len(list_1)):
    for item_count in range(0, list_1[count]):
      print("+", end= " ")
    print("")

histogram(list_1)


# Learning Activity 61 - Classes and Objects
# The following code will create a person class which has name, age, gender, address and education. Two objects
# of the class will be created and show name, age, gender and education of both objects.

class Person:
  def __init__(self, name, age, gender, edu):
    self.name = name
    self.age = age
    self.gender = gender
    self.edu = edu
  
  def myIntro(self):
    print("Hello, my name is " + self.name)
    print("My age is ", self.age)
    print("I am " + self.gender)
    print("I have done " + self.edu)

person1 = Person("chloe", 28, "female", "Bachelors")
person2 = Person("leon", 43, "male", "PhD")

person1.myIntro()
person2.myIntro()


# The above learning activities assisted me in completing the Assessment 2 software project, where the objective 
# was to develop an IT ticketing system. 
# Key learnings were classes and objects and creating methods/functions for those classes. 

# TicketingSystem.py
# @ author: Chloe Lau
# Date: 29.10.22

# This class contains a menu text and password change function
class Menu_List(object):
    def __init__(self):
        pass

    # display menu options and input prompt
    def Menu(self):
        # List of menu and logic to take input from user
        exit = 0
        while exit == 0:
            print("Select from the following choices: ")
            print("0: Exit")
            print("1: Submit helpdesk ticket")
            print("2: Show all tickets")
            print("3: Respond to ticket by number")
            print("4: Re-open resolved ticket")
            print("5: Display ticket stats")
            print("-"*50)
            option = input("Enter menu selection 0 - 5: ")

            if option == "0":
                exit = 1

            if option == "1":
                submit_query = "Y"

                # Create while loop for submitting tickets
                while submit_query == "Y":
                    staffid = input("Enter your staff id ")
                    name = input("Enter your name ")
                    email = input("Enter your email address ")
                    print("If you require a new password type: Password change")
                    issue = input("Enter description of problem ")
                    ticket = Ticket(name, staffid, email, issue)
                    if issue == "Password change":
                        ticket.password_change()
                        print(ticket.response)
                    submit_query = input("Do you have another problem to submit? (Y/N) ")

            elif option == "2":
                for ticket in Ticket.tickets:
                    ticket.ticketinfo()

            elif option == "3":
                ticket_to_change = input("Enter ticket number to respond to: ")
                for ticket in Ticket.tickets:
                    if ticket.number == int(ticket_to_change):
                        ticket.respond()

            elif option == "4":
                ticket_to_reopen = input("Enter ticket number to reopen: ")
                for ticket in Ticket.tickets:
                    if ticket.number == int(ticket_to_reopen):
                        ticket.reopen()
                        ticket.ticketinfo()

            elif option == "5":
                ticketstats()

# Define Ticket class
class Ticket:
    # Create counters for ticket number, number of tickets resolved and to solve
    counter = 0
    numClosed = 0
    numOpen = 0

    # Set default status and response
    status = "Open"
    response = "Not Yet Provided"

    # Create array of tickets
    tickets = []

    def __init__(self, name, staffid, email, issue):
        self.name = name
        self.staffid = staffid
        self.email = email
        self.issue = issue
        self.number = Ticket.counter + 2000

        # Increment counter and number of tickets open
        Ticket.counter += 1
        Ticket.numOpen += 1

        # Register new object with the class
        Ticket.tickets.append(self)

    # Create method to respond to tickets. If ticket response is updated, change ticket status to
    # "Closed." Increment numClosed by 1 and decrement numOpen by 1
    def respond(self):
       res = input("Provide response here: ")
       self.response = res
       self.status = "Closed"
       Ticket.numClosed += 1
       Ticket.numOpen -= 1

    # Create method to change password. If description of issue contains the words "Password Change,"
    # create new password. Increment numClosed by 1 and decrement numOpen by 1
    def password_change(self):
        if self.issue == "Password change":
            self.response = "New password generated: " + self.staffid[:2] + self.name[:3]
            self.status = "Closed"
            Ticket.numClosed += 1
            Ticket.numOpen -= 1

    # Create method to reopen tickets. If ticket is reopened, change ticket status to "Reopened."
    # Increment numOpen by 1 and decrement numClosed by 1
    def reopen(self):
        self.status = "Reopened"
        Ticket.numOpen += 1
        Ticket.numClosed -= 1

    # Create ticketinfo method to print ticket number, name, staff ID, etc.
    def ticketinfo(self):
        print("Ticket Number: " + str(self.number))
        print("Ticket Creator: " + self.name)
        print("Staff ID: " + self.staffid)
        print("Email Address: " + self.email)
        print("Description: " + self.issue)
        print("Response: " + self.response)
        print("Ticket Status: " + self.status + "\n")

# Create function to print number of tickets submitted, resolved and open
def ticketstats():
    print("Tickets Created: " + str(Ticket.counter))
    print("Tickets Resolved: " + str(Ticket.numClosed))
    print("Tickets To Solve: " + str(Ticket.numOpen))

# Create test function (note only used for testing, not called in main function)
def test():
    # Create tickets
    ticket1 = Ticket("Inna", "INNAM", "inna@whitecliffe.co.nz", "My monitor stopped working")
    ticket2 = Ticket("Maria", "MARIAH", "maria@whitecliffe.co.nz", "Request for a videocamera to conduct webinars")
    ticket3 = Ticket("John", "JOHNS", "john@whitecliffe.co.nz", "Password change")

    # Display ticket statistics
    ticketstats()

    # Print tickets
    for ticket in Ticket.tickets:
        ticket.ticketinfo()

    # Check John's password changes when password_change is called
    ticket3.password_change()
    ticket3.ticketinfo()

    assert Ticket.numOpen == 2, "Expected number of open tickets is 2, but is " + str(Ticket.numOpen)
    assert Ticket.numClosed == 1, "Expected number of closed tickets is 1, but is " + str(Ticket.numClosed)

    # Resolve Inna's ticket and check output
    ticket1.respond()
    ticket1.ticketinfo()
    ticketstats()

    assert Ticket.numOpen == 1, "Expected number of open tickets is 1, but is " + str(Ticket.numOpen)
    assert Ticket.numClosed == 2, "Expected number of closed tickets is 2, but is " + str(Ticket.numClosed)

    # Reopen John's ticket and check output
    ticket3.reopen()
    ticket3.ticketinfo()
    ticketstats()

    assert Ticket.numOpen == 2, "Expected number of open tickets is 2, but is " + str(Ticket.numOpen)
    assert Ticket.numClosed == 1, "Expected number of closed tickets is 1, but is " + str(Ticket.numClosed)

    print("All tests passed!")

# Main function
if __name__ == "__main__":
    menu = Menu_List()
    menu.Menu()
